name: 'Terraform Apply'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-apply.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
        default: 'dev'
      confirm_apply:
        description: 'Type "apply" to confirm deployment'
        required: true
        type: string

env:
  TF_VERSION: '1.9.8'  # Updated to support S3 native locking
  AWS_REGION: 'eu-west-1'

jobs:
  validate-input:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation
        if: github.event.inputs.confirm_apply != 'apply'
        run: |
          echo "‚ùå Deployment not confirmed. Please type 'apply' to confirm."
          exit 1

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: [validate-input]
    if: always() && (needs.validate-input.result == 'success' || github.event_name == 'push')
    
    strategy:
      matrix:
        environment: 
          - ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || 'dev' }}
        
    permissions:
      contents: read
      issues: write
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: terraform-apply-${{ matrix.environment }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: terraform
      run: |
        terraform init \
          -backend-config="environments/${{ matrix.environment }}/backend.conf" \
          -input=false
      env:
        TF_VAR_environment: ${{ matrix.environment }}

    - name: Terraform Plan
      working-directory: terraform
      run: |
        terraform plan \
          -var-file="environments/${{ matrix.environment }}/terraform.tfvars" \
          -out=tfplan-${{ matrix.environment }} \
          -input=false
      env:
        TF_VAR_environment: ${{ matrix.environment }}

    - name: Terraform Apply
      working-directory: terraform
      run: |
        terraform apply \
          -auto-approve \
          tfplan-${{ matrix.environment }}
      env:
        TF_VAR_environment: ${{ matrix.environment }}

    - name: Get outputs
      working-directory: terraform
      id: outputs
      run: |
        echo "cluster_name=$(terraform output -raw cluster_id)" >> $GITHUB_OUTPUT
        echo "cluster_endpoint=$(terraform output -raw cluster_endpoint)" >> $GITHUB_OUTPUT
        echo "configure_kubectl=$(terraform output -raw configure_kubectl)" >> $GITHUB_OUTPUT

    - name: Create deployment summary
      run: |
        echo "## üöÄ Deployment Successful for ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Cluster Name:** ${{ steps.outputs.outputs.cluster_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîß Configure kubectl" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.outputs.outputs.configure_kubectl }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.outputs.outputs.cluster_name }}
        kubectl get nodes

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Terraform Apply Failed - ${{ matrix.environment }}`,
            body: `
            ## ‚ùå Terraform Apply Failed
            
            **Environment:** ${{ matrix.environment }}
            **Workflow:** ${context.workflow}
            **Run ID:** ${context.runId}
            **Commit:** ${context.sha}
            
            Please check the workflow logs for details.
            `,
            labels: ['terraform', 'deployment-failed', '${{ matrix.environment }}']
          });

  update-dev-on-main:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: terraform-apply
    runs-on: ubuntu-latest
    steps:
      - name: Auto-apply to staging
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'terraform-apply.yml',
              ref: 'main',
              inputs: {
                environment: 'staging',
                confirm_apply: 'apply'
              }
            });